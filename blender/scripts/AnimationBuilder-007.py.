#!/usr/bin/python

import os, sys
import json
import bpy

#with open('images.json', 'w') as json_file:
#    json.dump(images, json_file)

class AnimationBuilder:

        def __init__(self):
            self.__json_file = "/home/artista/3D/maria-bernade/media.json"
            self.__startFrame = 0
            self.__frameEnd = 0
            self.__imageDirectory = "/home/artista/3D/maria-bernade/images/"
            self.__assetsDirectory = "/home/artista/3D/maria-bernade/assets/"
            self.__imageSequenceDirectory = "/home/artista/3D/maria-bernade/animation/"
            self.__movieDirectory = "/home/artista/3D/maria-bernade/movie/"
            self.__audioirectory = "/home/artista/3D/maria-bernade/audio/"
            self.__soundtrackDirectory = "/home/artista/3D/maria-bernade/soundtrack/"

            self.__imageChannel = 2
            self.__subtitlesChannel = 4
            self.__subtitlesBackgroundChannel = 3
            self.__backgroundChannel = 0
            self.__textPositionX = 0
            self.__textPositionY = 0

        def setup(self):
            bpy.context.scene.render.resolution_x = 1920
            bpy.context.scene.render.resolution_y = 1080

            bpy.context.scene.render.engine = 'BLENDER_EEVEE'
            bpy.context.scene.eevee.use_gtao = True
            bpy.context.scene.eevee.use_ssr = True
            bpy.context.scene.eevee.use_motion_blur = True
            bpy.context.scene.render.film_transparent = True

            bpy.context.scene.view_settings.look = 'Medium Contrast'

        def __addMovies(self, image):
                pass

        def __addAudio(self, image):
                pass
        
        def __addSounstrack(self, image):
                pass

        def __addImage(self, image):
#            self.__frameStart = self.__frameEnd
#            self.__frameEnd = self.__frameEnd + image["duration"]
            
            area = bpy.context.area
            old_type = area.type
            area.type = 'SEQUENCE_EDITOR'

            bpy.ops.sequencer.image_strip_add(
                    directory = self.__imageDirectory, 
                    files = [{"name": image["image"]}], 
                    relative_path = True, show_multiview = False, 
                    frame_start = self.__frameStart, frame_end = self.__frameEnd, 
                    channel = self.__imageChannel, fit_method = 'FIT')
                    #bpy.ops.transform.seq_slide(value=(7, 0))
            self.__addSubtitle(self.__frameStart, self.__frameEnd, image)
            area.type = old_type 


        def __addSubitlesBackground(self, frameStart, frameEnd):
            area = bpy.context.area
            old_type = area.type
            area.type = 'SEQUENCE_EDITOR'
            frameStart = 0

            bpy.ops.sequencer.image_strip_add(
                    directory = self.__assetsDirectory, 
                    files = [{"name": "subtitles.png"}], 
                    frame_start = frameStart, 
                    frame_end = frameEnd, 
                    channel = self.__subtitlesBackgroundChannel,
                    fit_method = 'FIT')
            bpy.context.active_sequence_strip.blend_type = 'ALPHA_OVER'

            area.type = old_type 
        
        def __addSubtitle(self, frameStart, frameEnd, image):
            area = bpy.context.area
            old_type = area.type
            area.type = 'SEQUENCE_EDITOR'
            
            bpy.ops.sequencer.effect_strip_add(type='TEXT', 
                frame_start=frameStart,
                 frame_end=frameEnd, 
                 channel=self.__subtitlesChannel)

            bpy.context.active_sequence_strip.text = image["subtitle"]
            bpy.ops.font.open(filepath="//../../../../../usr/share/fonts/exo-2/Exo2[wght].ttf", relative_path=True)
            bpy.context.active_sequence_strip.use_bold = True
            bpy.context.active_sequence_strip.font_size = 30
            bpy.context.active_sequence_strip.align_x = 'RIGHT'

            
            bpy.context.active_sequence_strip.transform.offset_x = 800
            bpy.context.active_sequence_strip.transform.offset_y = -480
            
            area.type = old_type 

        def __addBackground(self, frameStart, frameEnd):
            area = bpy.context.area
            old_type = area.type
            area.type = 'SEQUENCE_EDITOR'
            frameStart = 0
            
            #bpy.ops.sequencer.effect_strip_add(type='COLOR', frame_start=0, frame_end=self.__frameEnd, channel=1)
            bpy.ops.sequencer.effect_strip_add(
                    type = 'COLOR', 
                    frame_start = frameStart, 
                    frame_end = frameEnd, 
                    channel = self.__backgroundChannel)
            bpy.context.active_sequence_strip.color = (1, 1, 1)
            #bpy.ops.transform.seq_slide(value=(71, 0))
            bpy.context.active_sequence_strip.blend_type = 'ALPHA_OVER'

            area.type = old_type 
            
        def cleanup(self):
            context = bpy.context
            scene = context.scene
            seq = scene.sequence_editor

            # stips meta_strips 
            for strip in seq.sequences:
                print(strip.name)
            # all strips
            for strip in seq.sequences_all:
                print(strip.name)
            #remove
            for strip in seq.sequences:
                seq.sequences.remove(strip)
                
        def __addImageSequene(self, image):
            pass
            dirs = os.listdir( self.__imageSequenceDirectory + "/" + image )

            files = []
            for file in dirs:
                print(file)
                files.append(file)
                
            area = bpy.context.area
            old_type = area.type
            area.type = 'SEQUENCE_EDITOR'

            bpy.ops.sequencer.image_strip_add(
                    directory = self.__imageDirectory, 
                    files = [{"name": files}], 
                    relative_path = True, show_multiview = False, 
                    frame_start = self.__frameStart, frame_end = self.__frameEnd, 
                    channel = self.__imageChannel, fit_method = 'FIT')
                    #bpy.ops.transform.seq_slide(value=(7, 0))
            self.__addSubtitle(self.__frameStart, self.__frameEnd, image)
            area.type = old_type 
                
            return len(files)
        
        def __addMovie(self, image):
            file = self.__movieDirectory + '/mvies/';
            bpy.ops.sequencer.movie_strip_add(
            filepath=image["image"], 
            file = self.__movieDirectory , 
            files=[{"name": file, "name": file}], 
            relative_path=True, show_multiview=False, 
            frame_start=3048, channel=1, fit_method='FIT', 
            set_view_transform=False, 
            use_framerate=False)
            
        
        def __addAudio(self, image):
            print(image)
            
            fpath = self.__audioDirectory + '/' * image["image"]
            bpy.context.spa.sound_strip_add(
                filepath= fpath,
                directory = self.__audioDirectory
                files = [{"name": image["image"]}], 
                relative_path=True, frame_start=0, channel=1)
        
        def __addSoundtrack(self, image):
            bpy.context.spa.sound_strip_add(
            filepath="//../../../Music/mp3/Jewel - Greatest Hits 2013 Pop 320kbps CBR MP3 [VX] [P2PDL]/01 Jewel - Who Will Save Your Soul.mp3", 
            directory="/home/artista/Music/mp3/Jewel - Greatest Hits 2013 Pop 320kbps CBR MP3 [VX] [P2PDL]/", 
            files=[{"name":"01 Jewel - Who Will Save Your Soul.mp3", "name":"01 Jewel - Who Will Save Your Soul.mp3"}], 
            relative_path=True, frame_start=0, channel=1)

        def run(self):
            self.cleanup()
            self.setup()
            file = open(self.__json_file,"r")
            json_str = file.read()
            file.close()

            images = json.loads(json_str)
            
            for image in images:
                print(image)
                self.__frameStart = self.__frameEnd + 1
                self.__frameEnd = self.__frameEnd + image["duration"]
                if image["type"] == "image":
                    self.__addImage(image)
                elif image["type"] == "image-sequence":
                    self.__addImageSequene(image)
                elif image["type"] == "movie":
                    self.__addMovie(image)
                elif image["type"] == "audio":
                    self.__addAudio(image)
                elif image["type"] == "soundtrack":
                    self.__addSoundtrack(image)

            bpy.context.scene.frame_end = self.__frameEnd 
            self.__addSubitlesBackground(self.__frameStart, self.__frameEnd)
            self.__addBackground(self.__frameStart, self.__frameEnd)

if __name__ == "__main__":
    ani = AnimationBuilder()
    ani.run()
